<?php
/**
 * @file
 * Create tournament, match, and game entities for creating tournaments.
 */

define('TOURNEY_GAMES', 3);
define('TOURNEY_TRUNCATE', 12);
define('TOURNEY_DEBUG_EXTENDS', FALSE);

/**
 * Implements hook_menu().
 */
function tourney_menu() {
  $items = array();
  $items['tourney/tournament/add'] = array(
    'title' => 'Add a new tournament',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_tournament', NULL, 'add'),
    'access arguments' => array('create tourney'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/tournament/%tourney_tournament/addmatch'] = array(
    'title' => 'Add extra match',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_match', NULL, 'add'),
    'access arguments' => array('create tourney'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney.match.inc',
    'weight' => 20,
  );
  $items['tourney/tournament/%tourney_tournament'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_tournament_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'tourney_tournament', 2),
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/tournament/%tourney_tournament/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/tournament/%tourney_tournament/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_tournament_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'tourney_tournament'),
    'file' => 'includes/tourney.tournament.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/tournament/%tourney_tournament/reset'] = array(
    'title' => 'Reset Ranks',
    'page callback' => 'tourney_rank_reset',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'tourney_tournament'),
    'file' => 'includes/tourney.rank.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/tournament/%tourney_tournament/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'tourney_confirm_delete_page',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('delete', 'tourney_tournament'),
    'file' => 'includes/tourney.admin.inc',
    'weight' => 10,
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/match/%tourney_match'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_match_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'tourney_match'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/match/%tourney_match/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/match/%tourney_match/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_match_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'tourney_match'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/game/%tourney_game'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_game_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'tourney_game'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/game/%tourney_game/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/game/%tourney_game/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_game_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'tourney_game'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/tourney'] = array(
    'title' => 'Manage Tourney Entities',
    'page callback' => 'tourney_overview_entities',
    'access arguments' => array('administer tourney'),
    'description' => 'Manage Tournament entities.',
    'file' => 'includes/tourney.tournament.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/tourney'] = array(
    'title' => 'Tournaments',
    'page callback' => 'tourney_admin_content',
    'access arguments' => array('administer tourney'),
    'description' => 'View all the tournaments on your site.',
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // Config
  $items['admin/config/tourney'] = array(
    'title' => 'Tourney',
    'description' => 'Configure Tournament module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tourney_configuration'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tourney/%ctools_js/rounds/configure'] = array(
    'page callback' => 'tourney_configure_rounds',
    'page arguments' => array(1),
    'access arguments' => array('create tourney'),
    'file' => 'includes/tourney.modal.rounds.inc',
  );
  $items['tourney/%ctools_js/seeds/configure'] = array(
    'page callback' => 'tourney_configure_seeds',
    'page arguments' => array(1),
    'access arguments' => array('create tourney'),
    'file' => 'includes/tourney.modal.seeds.inc',
  );
  

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function tourney_menu_alter(&$items) {
  // Only alter when devel is available.
  if (isset($items['node/%node/devel'])) {
    // tourney_tournament entities.
    $items['tourney/tournament/%tourney_tournament/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_tournament', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/tournament/%tourney_tournament/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/tournament/%tourney_tournament/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_tournament', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    // tourney_match entities.
    $items['tourney/match/%tourney_match/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_match', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/match/%tourney_match/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/match/%tourney_match/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_match', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    // tourney_game entities.
    $items['tourney/game/%tourney_match/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_game', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/match/%tourney_match/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/match/%tourney_game/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_game', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
  }
}

/**
 * Implements hook_admin_paths().
 */
function tourney_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'tourney/*/*/*' => TRUE,
      'tourney/*/add' => TRUE,
    );
  }
}

/**
 * Implements hook_permission().
 */
function tourney_permission() {
  return array(
    'administer tourney' =>  array(
      'title' => t('Administer Tournaments'),
      'description' => t('Create, edit, delete, and perform administration for tournaments.'),
    ),
    'create tourney' =>  array(
      'title' => t('Create Tournaments'),
      'description' => t('Create new tournaments.'),
    ),
    'edit tourney' =>  array(
      'title' => t('Edit Tournaments'),
      'description' => t('Edit any tournaments.'),
    ),
    'delete tourney' =>  array(
      'title' => t('Delete Tournaments'),
      'description' => t('Delete any tournaments.'),
    ),
    'access tourney' =>  array(
      'title' => t('View Tournaments'),
      'description' => t('View any tournament.'),
    ),
    'view unpublished tourney' =>  array(
      'title' => t('View Unpublished Tournaments'),
      'description' => t('View unpublished tournament.'),
    ),
  );
}

/**
 * Menu title callback.
 */
function tourney_page_title($tourney) {
  return ucfirst($tourney->label());
}

function _tourney_machine_name($title) {
  return trim(preg_replace('/[^a-z0-9-]/', '-', strtolower($title)), '-');
}

/**
 * Implements hook_entity_info().
 */
function tourney_entity_info() {
  $return = array();
  $entities = tourney_entities();
  foreach ($entities as $entity_name => $bundle) {
    // Entity name minus the tourney_ prefix
    $entity_short = substr($entity_name, 8);

    $entity_class = 'Entity';
    $entity_class = ($entity_short == 'tournament') ? 'TourneyTournamentEntity' : $entity_class;
    $entity_class = ($entity_short == 'match') ? 'TourneyMatchEntity' : $entity_class;
    $entity_class = ($entity_short == 'game') ? 'TourneyGameEntity' : $entity_class;

    $return[$entity_name] = array(
      'label' => ucfirst($entity_short),
      'entity class' => $entity_class,
      'controller class' => 'EntityAPIController',
      'base table' => $entity_name,
      'fieldable' => TRUE,
      'uri callback' => 'tourney_uri',
      'static cache' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full Content'),
          'custom settings' => TRUE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),

      'access callback' => 'tourney_entity_access',
      'module' => 'tourney',
    );

    // Add bundle info but bypass entity_load() as we cannot use it here.
    $types = db_select($entity_name . '_type', 'ttp')
      ->fields('ttp')
      ->execute()
      ->fetchAllAssoc('name');

    foreach ($types as $type => $info) {
      $return[$entity_name]['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/tourney/' . $entity_short . '/manage/%' . $entity_name . '_type',
          'real path' => 'admin/structure/tourney/' . $entity_short . '/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('administer tourney'),
        ),
      );
    }

    $return[$entity_name . '_type'] = array(
      'label' => t('@entity type', array('@entity' => ucfirst($entity_short))),
      'plural label' => t('@entity types', array('@entity' => ucfirst($entity_short))),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => $entity_name . '_type',
      'fieldable' => FALSE,
      'bundle of' => $entity_name,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'tourney_type_access',
      'module' => 'tourney',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/tourney/' . $entity_short,
        'file' => 'includes/tourney.admin.inc',
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Setup view modes for the entities we created.
 */
function tourney_entity_info_alter(&$entity_info) {
  $entity_info['tourney_tournament']['view modes'] += array(
    'bracket' => array(
      'label' => t('Bracket'),
      'custom settings' => TRUE,
    ),
    'match_list' => array(
      'label' => t('Match List'),
      'custom settings' => TRUE,
    ),
  );

  $entity_info['tourney_match']['view modes'] += array(
    'match_block' => array(
      'label' => t('Match Block'),
      'custom settings' => TRUE,
    ),
    'game_list' => array(
      'label' => t('Game List'),
      'custom settings' => TRUE,
    ),
  );
}



/**
 * Access callback for the entity API.
 */
function tourney_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer tourney', $account);
}

/**
 * Implements hook_forms().
 */
function tourney_forms($form_id, $args) {
  foreach (tourney_entities() as $entity_name => $bundle) {
    $forms[$entity_name . '_type_form'] = array(
      'callback' => 'tourney_type_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function tourney_field_extra_fields() {
  $extra['tourney_tournament']['tournament'] = array(
    'form' => array(
      'format' => array(
        'label' => t('Format'),
        'description' => t('The format of the tournament.'),
        'weight' => 0,
      ),
      'winner' => array(
        'label' => t('Winner'),
        'description' => t('The winner of the tournament.'),
        'weight' => 0,
      ),
      'players' => array(
        'label' => t('Players'),
        'description' => t('The number of players in the tournament.'),
        'weight' => 0,
      ),
      'bracket' => array(
        'label' => t('Bracket of matches'),
        'description' => t('Rendered matches in a tournament bracket.'),
        'weight' => 1,
      ),
      'match_list' => array(
        'label' => t('List of matches'),
        'description' => t('Rendered matches in a tournament list.'),
        'weight' => 1,
      ),
    ),
    'display' => array(
      'tourney_format' => array(
        'label' => t('Format'),
        'description' => t('The format of the tournament.'),
        'weight' => 0,
      ),
      'tourney_winner' => array(
        'label' => t('Winner'),
        'description' => t('The winner of the tournament.'),
        'weight' => 0,
      ),
      'tourney_players' => array(
        'label' => t('Players'),
        'description' => t('The number of players in the tournament.'),
        'weight' => 0,
      ),
      'bracket' => array(
        'label' => t('Bracket of matches'),
        'description' => t('Rendered matches in a tournament bracket.'),
        'weight' => 1,
      ),
      'match_list' => array(
        'label' => t('List of matches'),
        'description' => t('Rendered matches in a tournament list.'),
        'weight' => 1,
      ),
    ),
  );

  $extra['tourney_match']['match'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
    ),
    'display' => array(
      'tournament' => array(
        'label' => t('Tournament Link'),
        'description' => t('A link to the tournament this match is in'),
        'weight' => -5,
      ),
      'match_winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'match_contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'match_contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
      'match_table' => array(
        'label' => t('Games Grid with Win button'),
        'description' => t('Rendered display of games in the match'),
        'weight' => 0,
      ),
      'match_block' => array(
        'label' => t('Matchblock Element with Contestants'),
        'description' => t('Rendered Matchblock'),
        'weight' => 0,
      ),
    ),
  );

  $extra['tourney_game']['game'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'label' => array(
        'label' => t('Title'),
        'description' => t('The title of the game'),
        'weight' => -1,
      ),
      'game_winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function tourney_theme($existing, $type, $theme, $path) {
  return array(
    'tourney_render_match' => array(
      'variables' => array('match' => NULL),
      'file' => 'match.inc',
      'path' => $path . '/theme',
    ),
    'tourney_admin_content' => array(
      'variables' => array('tournaments' => NULL),
      'file' => 'includes/tourney.admin.inc',
    ),
    'tourney_render_tourney' => array(
      'variables' => array('tournament' => NULL),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_matchblock' => array(
      'variables' => array('match' => NULL, 'flow' => FALSE, 'small' => 0),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_spacer' => array(
      'variables' => array('height' => 1, 'flow' => FALSE, 'small' => TRUE, 'y' => 1),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_flow_control' => array(
      'variables' => array('flows' => ''),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_match_fix' => array(
      'render element' => 'element',
      'file' => 'tourney.match.inc',
      'path' => $path . '/includes',
    ),
    'tourney_match' => array(
      'render element' => 'elements',
      'template' => 'tourney-match',
      'path' => $path . '/theme',
    ),
  ) + _tourney_theme($existing, $type, $theme, $path);
}

/**
 * Get the theme implementations defined in the plugins.
 */
function _tourney_theme($existing, $type, $theme, $path) {
  $hooks = array();
  $plugins = tourney_get_types();
  foreach ($plugins as $info) {
    $class = ctools_plugin_get_class($info, 'controller');
    if (method_exists($class, 'theme')) {
      $hooks += $class::theme($existing, $type, $theme, $info['path']);
    }
  }
  return $hooks;
}

/**
 * Defines the entities and their default bundles for the entities created by
 * this module.
 */
function tourney_entities() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['tourney_tournament'] = (object) array(
      'type' => 'tournament',
      'name' => t('Tournament'),
      'description' => t('A tournament entity.'),
    );
    $types['tourney_match'] = (object) array(
      'type' => 'match',
      'name' => t('Match'),
      'description' => t('A match entity.'),
    );
    $types['tourney_game'] = (object) array(
      'type' => 'game',
      'name' => t('Game'),
      'description' => t('A game entity.'),
    );
  }
  return $types;
}

/**
 * URI callback defining path for each entity defined in tourney.
 */
function tourney_uri($entity) {
  return array(
    'path' => 'tourney/' . $entity->type . '/' . $entity->id,
  );
}

/**
 * Menu auto loaders.
 */
function tourney_tournament_type_load($type) {
  return tourney_tournament_type_get_types($type);
}
function tourney_match_type_load($type) {
  return tourney_match_type_get_types($type);
}
function tourney_game_type_load($type) {
  return tourney_game_type_get_types($type);
}

/**
 * Wrapper functions for the default entities #machine_name existing callback.
 */
function tourney_tournament_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_tournament_type', $type_name);
}
function tourney_match_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_match_type', $type_name);
}
function tourney_game_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_game_type', $type_name);
}

/**
 * Gets an array of all types, keyed by the type name.
 *
 * @param $entity_name
 *   The name of the entity to look at.
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return
 *   Depending whether $type isset, an array of types or a single one.
 */
function tourney_entity_get_types($entity_name, $type_name = NULL) {
  $types = entity_load_multiple_by_name($entity_name, isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Entity access callback for tourney module.
 *
 * This is the access callback for the entity when it has not been accessed 
 * through a menu router. I.E. a node with an entity reference field to a
 * tournament.
 *
 * @see entity_access()
 */
function tourney_access($op = 'view', $entity_type = NULL, $entity = NULL, $account = NULL) {
  if (user_access('administer tourney')) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      if (is_object($entity) && property_exists($entity, 'status') && $entity->status == 0) {
        return user_access('view unpublished tourney');
      }
      else {
        return user_access('access tourney');
      }

    case 'edit':
      return user_access('edit tournament');

    case 'delete':
      return user_access('delete tournament');
  }

  return FALSE;
}

/**
 * Entity access callback for tourney module.
 *
 * This is the access callback for the entity when it has not been accessed 
 * through a menu router. I.E. a node with an entity reference field to a
 * tournament.
 *
 * @see entity_access()
 */
function tourney_entity_access($op = 'view', $entity = NULL, $account = NULL, $entity_type = NULL) {
  if (user_access('administer tourney')) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      if (property_exists($entity, 'status') && $entity->status == 0) {
        return user_access('view unpublished tourney');
      }
      else {
        return user_access('access tourney');
      }

    case 'edit':
      return user_access('edit tournament');

    case 'delete':
      return user_access('delete tournament');
  }

  return FALSE;
}

/**
 * Load a tourney entity by entity type and name.
 *
 * @param $entity_type
 *   The entity type to load from.
 * @param $name
 *   The machine name of the entity you want to load.
 * @return
 *   A loaded entity object.
 */
function tourney_entity_load_by_name($entity_type, $name, $reset = FALSE) {
  $entity_id = db_query("SELECT id FROM {" . $entity_type . "} WHERE name = :name",
    array(':name' => $name))
    ->fetchField();

  $function = $entity_type . '_load';
  return $entity_id  > 0 ? $function($entity_id, NULL, $reset) : NULL;
}

/**
 * Fetch a tournament object
 *
 * @param $id
 *   Integer specifying the tournament id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object of FALSE of it cannot be loaded.
 *
 * @see tourney_tournament_load_multiple()
 */
function tourney_tournament_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $tournament = tourney_tournament_load_multiple($ids, $conditions, $reset);

  return $tournament ? reset($tournament) : FALSE;
}

/**
 * Load multiple tournament entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of tournament entity objects, indexed by id.
 */
function tourney_tournament_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_tournament', $ids, $conditions, $reset);
}

/**
 * Fetch a match object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_match_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_match_load_multiple($ids, $conditions, $reset);
  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple match entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_match_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_match', $ids, $conditions, $reset);
}

/**
 * Fetch a game object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_game_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_game_load_multiple($ids, $conditions, $reset);

  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple game entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_game_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_game', $ids, $conditions, $reset);
}


/**
 * Implements hook_entity_insert().
 */
function tourney_entity_insert($entity, $type) {
  $entity->entity_type = $type;
  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function tourney_entity_update($entity, $type) {
  $info = entity_get_info($type);
  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function tourney_entity_delete($entity, $type) {
  // Remove the pathauto aliases for all our defined entities.
  if (module_exists('pathauto') && is_subclass_of($entity, 'TourneyEntity')) {
    $uri = tourney_uri($entity);
    pathauto_entity_path_delete_all($type, $entity, $uri);
  }
}

/**
 * Implements hook_ENTITY_view().
 */
function tourney_tourney_tournament_view($entity, $view_mode, $langcode = 'en') {
  $info = TourneyController::getPluginInfo($entity->format);
  
  $entity->content['#attached']['css'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.css'
  );
  $entity->content['#attached']['js'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.js'
  );
  $entity->content['tourney_format'] = array(
   '#prefix' => '<div class="field-label">Tournament Format:</div><div class="field-content">',
   '#suffix' => '</div>',
   '#markup' => $info['title'],
  );
  $entity->content['tourney_players'] = array(
   '#prefix' => '<div class="field-label">Number of players:</div><div class="field-content">',
   '#suffix' => '</div>',
   '#markup' => $entity->players,
  );
  if ($entity->winner) {
    $entity->content['tourney_winner'] = array(
     '#prefix' => '<div class="field-label">Winner:</div><div class="field-content">',
     '#suffix' => '</div>',
     '#markup' => $entity->winner,
    );
  }
  // Matches for this tournament displayed as a tree
  $tree = $entity->render('tree');
  if ( $tree ) {
    $entity->content['bracket'] = array(
      '#prefix' => '<div class="field-label">Matches:</div><div class="field-content">',
      '#suffix' => '</div>',
      '#markup' => $tree,
    );
  }
  
  // Matches for this tournament displayed as a list
  $list = $entity->render('list');
  if ( $list ) {
    $entity->content['list'] = array(
      '#prefix' => '<div class="field-label">Matches:</div><div class="field-content">',
      '#suffix' => '</div>',
      '#markup' => $list,
    );  
  }
}

/**
 * Implements hook_ENTITY_view().
 */
function tourney_tourney_match_view($entity, $view_mode = 'full', $langcode = 'en') {
  $match_extra_fields = $entity->getTournament()->get('match_extra_fields', array());
  
  $entity->content['#attached']['css'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.css'
  );
  $entity->content['#attached']['js'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.js'
  );
  
  if (array_key_exists('tournament', $match_extra_fields) && $match_extra_fields['tournament']) {
    $entity->content['tournament'] = array(
      '#prefix' => '<div class="field-label">Tournament:</div><div class="field-content">',
      '#suffix' => '</div>',
      '#theme' => 'link',
      '#text' => 'Go to tournament ' . $entity->getTournament()->label,
      '#path' => $entity->getTournament()->getUri(),
      '#options' => array('attributes' => array(), 'html' => FALSE),
    );
  }
  
  if (array_key_exists('match_winner', $match_extra_fields) && $match_extra_fields['match_winner']) {
    $entity->content['match_winner'] = array(
      '#prefix' => '<div class="field-label">Winner:</div><div class="field-content">',
      '#suffix' => '</div>',
      '#markup' => $entity->getWinner(),
    );
  }
  
  if (array_key_exists('contestants', $match_extra_fields) && $match_extra_fields['contestants']) {
    $default_contestant_classes = array('field-content', 'contestant');
    $contestant_view_mode = $entity->getTournament()->get('contestant_view_mode', 'full');
    $i = 1;
    foreach ($entity->getMatchContestants() as $eid => $contestant) {
      $contestant_classes = $default_contestant_classes;
      $contestant_classes[] = 'contestant-' . $i;
      if ($entity->winner == $contestant->entity_type . '.' . $contestant->entity_id) {
        $contestant_classes[] = 'winner';
      }
    
      $entity->content['match_contestant' . $i] = array(
        '#prefix' => '<div class="field-label">Contestant ' . $i . ':</div><div class="'. join(' ', $contestant_classes) .'">',
        '#suffix' => '</div>',
        'contestant' => entity_view($contestant->entity_type, array($contestant), $contestant_view_mode),
      );
      $i++;
    }
  }
  
  if (array_key_exists('match_table', $match_extra_fields) && $match_extra_fields['match_table']) {
    if (property_exists($entity, 'matchInfo') && $entity->matchInfo && !array_key_exists('bye', $entity->matchInfo) || !$entity->matchInfo['bye']) {
      $entity->content['match_table'] = array(
        '#theme' => 'tourney_render_match',
        '#match' => $entity,
      );
    }
  }
  

  if ($view_mode == 'match_block') {
    // Gathering the winner nid's from each game.
    // This will allow the amount of wins per match to be printed on each contestant.
    $wins = array();
    foreach ($entity->gameIds as $gameId) {
      $game = tourney_game_load($gameId);
      if (isset($game->winner)) {
        $wins[] = (int) str_replace('node.', '', $game->winner);
      }
    }
    $game_wins = array_count_values($wins);

    // Make sure that we have the correct position of teams that are ordered on the match.
    $playerIdToSlots = array(
      $entity->contestantIds[0]['id'] => 0,
      $entity->contestantIds[1]['id'] => 1,
    );
    // Set the win count with the key that is set on the contestantIds.
    foreach($game_wins as $team => $winCount) {
      $entity->matchInfo['game_wins'][$playerIdToSlots[$team]] = $winCount;
    }
    // Place the game wins in it's own array to access later.
    $entity->content['game_wins'] = $game_wins;

    $entity->content['match_block'] = array(
      '#theme' => 'tourney_match_render',
      '#match' => $entity,
      '#plugin' => $entity->getTournament()->tourneyFormatPlugin,
    );
  }
}

/**
 * Implements hook_ENTITY_view().
 */
function tourney_tourney_game_view($entity, $view_mode, $langcode = 'en') {
  $entity->content['title'] = array(
    '#prefix' => '<div class="title">',
    '#suffix' => '</div>',
    '#markup' => $entity->label,
  );
  $entity->content['#attached']['css'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.css'
  );
  $entity->content['#attached']['js'] = array(
    drupal_get_path('module', 'tourney') . '/theme/tourney.js'
  );
  $entity->content['game_winner'] = array(
    '#prefix' => '<div class="field-label">Winner:</div><div class="field-content">',
    '#suffix' => '</div>',
    '#markup' => $entity->winner,
  );
}

function tourney_batch_save($controller, $mid, $match, &$context) {
  $controller::saveMatch($controller, $mid, $match, $context);
}

/**
 * Save a tournament entity.
 */
function tourney_tournament_save(&$tourney) {
  entity_save('tourney_tournament', $tourney);
}

/**
 * Save a match entity.
 */
function tourney_match_save(&$match) {
  entity_save('tourney_match', $match);
}

/**
 * Save a game entity.
 */
function tourney_game_save(&$game) {
  entity_save('tourney_game', $game);
  if (isset($game->match) && is_object($game->match)) {
    cache_clear_all('tourney_winner_count_' . $game->match->id, 'cache_tourney');
    cache_clear_all('tourney_match_games_' . $game->match->id, 'cache_tourney', TRUE);
    cache_clear_all('tourney_build_matches_' . $game->match->getTournament()->id, 'cache_tourney', TRUE);
  }
}

/**
 * Fetch metadata for all tournament_type plugins.
 *
 * @return
 *   An array of arrays with information about all available tournament types.
 */
function tourney_get_types() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('tourney', 'tourney_formats');
  return $plugins;
}

/**
 * Create a relation between two entities.
 *
 * @param $predicate
 *   The relation type to save.
 * @param $source_entity
 *   The source entity.
 * @param $source_id
 *   The entity id of the source entity.
 * @param $destination_entity
 *   The destination entity.
 * @param $destination_id
 *   The entity id of the destination entity.
 */
function tourney_create_relation($predicate, $source_entity, $source_id, $destination_entity, $destination_id) {
  $entity_keys = array(
    array('entity_type' => $source_entity, 'entity_id' => $source_id),
    array('entity_type' => $destination_entity, 'entity_id' => $destination_id),
  );
  return relation_insert($predicate, $entity_keys);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function tourney_ctools_plugin_type() {
  $plugins['tourney_formats'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function tourney_ctools_plugin_directory($module, $plugin) {
  if ($module == 'tourney' && $plugin == 'tourney_formats') {
    return 'plugins/tourney_formats';
  }
}

/**
 * Implements hook_views_api().
 */
function tourney_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Update the URL aliases for an individual tourney entity.
 *
 * @param $entity
 *   An entity object.
 * @param $op
 *   Operation being performed ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function tourney_update_alias($entity, $op, array $options = array()) {
  if (!isset($entity->path)) $entity->path = array('pathauto' => true);

  $path = $entity->path;
  if(!empty($path['alias'])){
    $path['alias'] = trim($path['alias']);
  }
  $has_pattern = module_exists('pathauto') ? pathauto_pattern_load_by_entity($entity->entity_type, $entity->type) : FALSE;

  if ($has_pattern && isset($entity->path['pathauto']) && $path['pathauto']) {
    module_load_include('inc', 'pathauto');
    $uri = entity_uri($entity->entity_type, $entity);
    return pathauto_create_alias($entity->entity_type, $op, $uri['path'], array($entity->entity_type => $entity), $entity->type);
  }
  if (!empty($path['pid']) && empty($path['alias'])) {
    path_delete($path['pid']);
  }
  if (!empty($path['alias'])) {
    $path['source'] = 'tourney/' . $entity->type . '/' . $entity->id;
    $path['language'] = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
    path_save($path);
  }
}
/**
 * Implements hook_flush_caches().
 */
function tourney_flush_caches() {
  return array('cache_tourney');
}

/**
 * Returns a single part of a full match name
 *
 * @param $name
 *   Full name of the match in bracket_round_match[_contestant] format
 * @param $part
 *   Which part of the name to return
 * @return $value
 *   Value of the part asked for
 */
function tourney_get_name_part($name, $part) {
  foreach (explode('_', $name) as $sub) {
    $sub = explode('-', $sub);
    if ($sub[0] == $part) return $sub[1];
  }
}

/**
 * Initializes a global tourney config object with contents of tourney config
 * from the db.
 */
function tourney_initialize_configuration() {
  global $_tourney_config;

  if ($cached = cache_get('configuration', 'cache_tourney')) {
    $config = $cached->data;
  }
  else {
    $name = 'tourney_variable_init';
    if (!lock_acquire($name, 1)) {
      lock_wait($name);
      return tourney_initialize_configuration();
    }
    else {
      $config = array();
      $query = db_query('SELECT id, type, value FROM {tourney}');
      foreach ($query->fetchAll() as $row) {
        $config[$row->id][$row->type] = unserialize($row->value);
      }
      cache_set('configuration', $config, 'cache_tourney');
      lock_release($name);
    }
  }

  $_tourney_config = $config;
  return $config;
}

/**
 * Implements hook_action_info().
 */
function tourney_action_info() {
  return array(
    'tourney_entity_publish_action' => array(
      'type' => 'entity',
      'label' => t('Publish selected entities'),
      'configurable' => FALSE,
    ),
    'tourney_entity_unpublish_action' => array(
      'type' => 'entity',
      'label' => t('Unpublish selected entities'),
      'configurable' => FALSE,
    ),
    'tourney_tournament_delete_action' => array(
      'type' => 'tourney_tournament',
      'label' => t('Delete selected tournaments'),
      'configurable' => FALSE,
    ),
    'tourney_match_update_labels_action' => array(
      'type' => 'tourney_match',
      'label' => t('Update Match Labels'),
      'configurable' => FALSE,
    ),
  );
}

/**
 * VBO action: Delete entity.
 */
function tourney_tournament_delete_action(&$entity, $context) {
  $tournament = tourney_tournament_load(array($entity->entity_id));
  $tournament->delete();
}

/**
 * VBO action: Publish entity.
 */
function tourney_entity_publish_action(&$entity, $context) {
  $entity->status = 1;
  entity_save($entity->entity_type, $entity);
}

/**
 * VBO action: Unpublish entity.
 */
function tourney_entity_unpublish_action(&$entity, $context) {
  $entity->status = 0;
  entity_save($entity->entity_type, $entity);
}

/**
 * VBO action: Update labels.
 */
function tourney_match_update_labels_action(&$entity, $context) {
  $function = 'auto_entitylabel_set_title';
  if (function_exists($function)) {
    $function($entity, $entity->entity_type);
  }
  entity_save($entity->entity_type, $entity);
}


// POSSIBLE ENTITY MODULE PATCHES:

function entity_load_by_eid($eids) {
  $entities = array();
  foreach ($eids as $eid) {
    $entities[$eid] = entity_load_single_by_eid($eid);
  }
  return $entities;
}

function entity_load_single_by_eid($eid) {
  @list($type, $id) = explode('.', $eid);
  return entity_load_single($type, $id);
}

/**
 * Implements hook_entity_load().
 */
function tourney_entity_load($entities, $type) {
  // Need consistent properties about the entity loaded since contestants can
  // be any entity.
  // @todo: limit this logic just to entities that are setup in the contestant
  //   relations.
  foreach ($entities as $id => $entity) {
    $entity->eid         = $type . '.' . $id;
    $entity->entity_type = $type;
    $entity->entity_id   = $id;
    $entity->entity_name =
      property_exists($entity, 'name') ? $entity->name :
        (property_exists($entity, 'title') ? $entity->title :
          (property_exists($entity, 'label') ? $entity->label : NULL));
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function tourney_entity_property_info_alter(&$info) {
  $properties = &$info['tourney_match']['properties'];

  $properties['status']['setter callback'] = 'tourney_property_set';

  $properties['matchinfo_id'] = array(
    'label'           => t("Match ID"),
    'description'     => t("Number of match in the tournament"),
    'type'            => 'integer',
    'getter callback' => 'tourney_property_get',
  );
  $properties['matchinfo_bracket'] = array(
    'label'           => t("Bracket"),
    'description'     => t("Name of bracket match is in"),
    'type'            => 'text',
    'getter callback' => 'tourney_property_get',
  );
  $properties['matchinfo_round'] = array(
    'label'           => t("Round"),
    'description'     => t("Round in bracket match is in"),
    'type'            => 'integer',
    'getter callback' => 'tourney_property_get',
  );
  $properties['matchinfo_tourneyRound'] = array(
    'label'           => t("Tourney Round"),
    'description'     => t("Round in tournament match is in"),
    'type'            => 'integer',
    'getter callback' => 'tourney_property_get',
  );
  $properties['matchinfo_bye'] = array(
    'label'           => t("Bye"),
    'description'     => t("Boolean whether match is a bye"),
    'type'            => 'boolean',
    'getter callback' => 'tourney_property_get',
  );
  $properties['contestant_1'] = array(
    'label'           => t("First contestant"),
    'description'     => t("First contestant eid"),
    'type'            => 'text',
    'getter callback' => 'tourney_property_get',
  );
  $properties['contestant_2'] = array(
    'label'           => t("Second contestant"),
    'description'     => t("Second contestant eid"),
    'type'            => 'text',
    'getter callback' => 'tourney_property_get',
  );
}

function tourney_property_get($data, $options, $name, $type, $info) {
  if (substr($name, 0, 10) == 'matchinfo_') {
    $name = substr($name, 10);
    return $data->matchInfo[$name];
  }
  elseif (substr($name, 0, 11) == 'contestant_') {
    $contestants = $data->getContestantIds();
    $id = substr($name, 11)-1;
    if ( !isset($contestants[$id]) ) return NULL;
    return $contestants[$id]['eid'];
  }
}

function tourney_property_set(&$data, $name, $value, $langcode, $type, $info) {
  $data->$name = $value;
}

/**
 * Creates the path fieldset for the tournament add form if path module is on.
 *
 * @param $entity
 *   The entity, if any, being edited on tournament edit page.
 */
function tourney_create_path_field($entity) {
  if (!module_exists('path')) return;

  $path = array();
  if (!empty($entity->entity_id)) {
    $conditions = array('source' => 'tourney/' . $entity->type . '/' . $entity->entity_id);
    $path = path_load($conditions);
    if ($path === FALSE) {
      $path = array();
    }
  }

  $form = array();

  $form['path'] = array(
    '#type' => 'fieldset',
    '#title' => t('URL Path Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($path['alias']),
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('path-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'path') . '/path.js'),
    ),
    '#access' => user_access('create url aliases') || user_access('administer url aliases'),
    '#weight' => 30,
    '#tree' => TRUE,
    '#element_validate' => array('path_form_element_validate'),
  );

  $path += array(
    'pid' => NULL,
    'source' => isset($entity->entity_id) ? 'tourney/' . $entity->type . '/' . $entity->entity_id : NULL,
    'alias' => '',
    'language' => isset($entity->language) ? $match->language : LANGUAGE_NONE,
  );

  $form['path']['alias'] = array(
    '#type' => 'textfield',
    '#title' => t('URL alias'),
    '#default_value' => $path['alias'],
    '#maxlength' => 255,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Optionally specify an alternative URL by which this content can be accessed. For example, type "about" when writing an about page. Use a relative path and don\'t add a trailing slash or the URL alias won\'t work.'),
  );
  $form['path']['pid'] = array(
    '#type' => 'value',
    '#value' => $path['pid'],
  );
  $form['path']['source'] = array(
    '#type' => 'value',
    '#value' => $path['source'],
  );
  $form['path']['language'] = array(
    '#type' => 'value',
    '#value' => $path['language'],
  );

  return $form['path'];
}

/**
 * Reports if an entity bundle is a target for the given relation type.
 *
 * @param string|array $type
 *   Machine name of the relation type.
 * @param string $target_entity
 *   (optional) Machine name of the target entity. If no entity is specified
 *   then all bundles of any entity, if any, will report TRUE.
 * @param string $target_bundle
 *   (optional) Machine name of the target entity bundle to match. If no
 *   bundle is specified then any target bundles of type $target_entity will
 *   report TRUE.
 *
 * @return bool
 * Return FALSE on no match, or TRUE if entity bundle is a target.
 */
function tourney_relation_type_is_target($type, $target_entity = '', $target_bundle = '') {
  $report = FALSE;

  // Recursive call when $type is an array.
  if (is_array($type)) {
    foreach ($type as $type_element) {
      tourney_relation_type_is_target($type_element, $target_entity, $target_bundle);
    }
    return TRUE;
  }
  elseif (!isset($type) || !is_string($type)) {
    throw new Exception(t('Required parameter missing'));
  }

  try {
    $relation_type = relation_type_load($type);
    $entity_type = entity_get_info($target_entity);
  }
  catch (Exception $e) {
    throw new Exception(t('Parameter will not load object') . ': ' . $e->getMessage());
  }

  if (!$relation_type) {
    throw new Exception(t('Relation type does not exist') . ': ' . $type);
  }
  if ($target_entity && !$entity_type) {
    throw new Exception(t('Target entity type does not exist') . ': ' . $target_entity);
  }
  if ($target_bundle && !$target_entity) {
    throw new Exception(t('Target bundle can not be specified without a target entity') . ': ' . $target_bundle);
  }

  $target_value = $target_entity;
  if ($target_bundle) {
    $target_value = $target_value . ':' . $target_bundle;
  }

  $targets = $relation_type->target_bundles;
  $new_targets = array();
  foreach ($targets as $key => $target) {
    $target_elm = explode(':', $target);
    if (count($target_elm) < 2) {
      throw new Exception(t('Impossible'));
    }
    if (($target_entity) && ($target_bundle)) {
      if ($target == $target_value) {
        $report = TRUE;
        break;
      }
    }
    elseif (($target_entity) && ($target_elm[0] == $target_value)) {
      $report = TRUE;
    }
  }

  return $report;
}

/**
 * Returns a query object to find related entities.
 *
 * Overrides the default relation_query() function by removing the maximum
 * 50 record limitation. Continue to use the procedural api so that we do not
 * accidently lose functionality provided in the future.
 *
 * @param $entity_type
 *   (optional) The entity type of one of the endpoints.
 * @param $entity_id
 *   (optional) The entity id of one of the endpoints. Can also be an array of
 *   entity IDs.
 * @param $r_index
 *   (optional) The index of the search entity in the relation to be found
 *   (0 = source, 1 = target).
 *
 * @return RelationQuery
 *   The query object itself.
 *
 * @see relation_query()
 */
function tourney_relation_query($entity_type = NULL, $entity_id = NULL, $r_index = NULL) {
  $query = relation_query($entity_type, $entity_id, $r_index);
  $query->range = array();
  return $query;
}

/**
 * Returns the number of slots based on players set in plugin.
 * 
 * @param $controller
 *   The plugin type that has a player field.
 * @param $args
 *   All the parameters passed into the functions below.
 * 
 * @see tourney_configure_rounds().
 * @see tourney_configure_seeds().
 */
function tourney_configure_slots($args) {
  // Get the third parameter, it's the controller in the parameter list.
  $controller = $args[2];
  $plugins_with_player = json_decode(array_pop($args));
  $key = array_search($controller, $plugins_with_player);
  
  // The number of players start after the initial 3 parameters.
  return $args[$key + 3];
}
