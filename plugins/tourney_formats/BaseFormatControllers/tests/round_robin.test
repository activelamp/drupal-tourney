<?php

class RoundRobinNextMatchTestCase extends DrupalWebTestCase {
  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Test Round Robin next match positions'),
      'description' => t('Tests Round Robin tournaments with a varying number or contestants.'),
      'group' => t('Tourney'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    module_load_include('php', 'tourney', 'plugins/tourney_formats/BaseFormatControllers/RoundRobin');
    parent::setUp(array(
      'tourney',
    ));
  }

  /**
   * Loops through all the matches defined in the test and checks values against
   * the plugin.
   *
   * @param $match
   *   A formatted match array that has a winner and slot.
   * @param $tournament
   *   The built tournament object.
   */
  protected function checkNextMatch($match, $tournament) {
    $this->pass('Testing Round Robin with ' . $tournament->numContestants . ' players.');
    $tournament->build();
    $matches = $tournament->data['matches'];

    foreach ($match as $mid => $info) {
      $this->assertEqual($info['contestant1'], $matches[$mid]['nextMatch'][1]['id'], 'Match ' . $mid . ' Contestant1 is going to Match: '. $matches[$mid]['nextMatch'][1]['id'] . ' (Should be: '. $info['contestant1'] . ')', 'PHP');
      $this->assertEqual($info['contestant1_slot'], $matches[$mid]['nextMatch'][1]['slot'], 'Match ' . $mid . ' Contestant1 is going Slot: '. $matches[$mid]['nextMatch'][1]['slot'] . ' (Should be: '. $info['contestant1_slot'] . ')', 'PHP');
  		$this->assertEqual($info['contestant2'], $matches[$mid]['nextMatch'][2]['id'], 'Match ' . $mid . ' Contestant2 is going to Match: '. $matches[$mid]['nextMatch'][2]['id'] . ' (Should be: '. $info['contestant2'] . ')', 'PHP');
      $this->assertEqual($info['contestant2_slot'], $matches[$mid]['nextMatch'][2]['slot'], 'Match ' . $mid . ' Contestant2 is going Slot: '. $matches[$mid]['nextMatch'][2]['slot'] . ' (Should be: '. $info['contestant2_slot'] . ')', 'PHP');
    }
    $this->pass('End of Round Robin with ' . $tournament->numContestants . ' players.');
  }

	/**
	 * Testing Roun Robin next match logic.
	 */
  public function testRoundRobinLogic() {
  
    /**
     * 4 man Round
     */
    $tournament = new RoundRobinController(4);
    
    // Set the paths we are expecting the plugin to return.
    $match = array(
      1 => array(
        'contestant1' => 3,
        'contestant1_slot' => 2,
        'contestant2' => 4,
        'contestant2_slot' => 2,
      ),
      2 => array(
        'contestant1' => 4,
        'contestant1_slot' => 1,
        'contestant2' => 3,
        'contestant2_slot' => 1,
      ),
      3 => array(
        'contestant1' => 6,
        'contestant1_slot' => 1,
        'contestant2' => 5,
        'contestant2_slot' => 1,
      ),
      4 => array(
        'contestant1' => 5,
        'contestant1_slot' => 2,
        'contestant2' => 6,
        'contestant2_slot' => 2,
      ),
    );

    $this->checkNextMatch($match, $tournament);

    /**
     * 6 man Round
     */
    $tournament = new RoundRobinController(6);

    // Set the paths we are expecting the plugin to return.
    $match = array(
      1 => array(
        'contestant1' => 4,
        'contestant1_slot' => 2,
        'contestant2' => 5,
        'contestant2_slot' => 2,
      ),
      2 => array(
        'contestant1' => 6,
        'contestant1_slot' => 2,
        'contestant2' => 4,
        'contestant2_slot' => 1,
      ),
      3 => array(
        'contestant1' => 6,
        'contestant1_slot' => 1,
        'contestant2' => 5,
        'contestant2_slot' => 1,
      ),
      4 => array(
        'contestant1' => 8,
        'contestant1_slot' => 1,
        'contestant2' => 7,
        'contestant2_slot' => 1,
      ),
      5 => array(
        'contestant1' => 7,
        'contestant1_slot' => 2,
        'contestant2' => 9,
        'contestant2_slot' => 1,
      ),
      6 => array(
        'contestant1' => 8,
        'contestant1_slot' => 2,
        'contestant2' => 9,
        'contestant2_slot' => 2,
      ),
      7 => array(
        'contestant1' => 10,
        'contestant1_slot' => 2,
        'contestant2' => 11,
        'contestant2_slot' => 2,
      ),
      8 => array(
        'contestant1' => 12,
        'contestant1_slot' => 2,
        'contestant2' => 10,
        'contestant2_slot' => 1,
      ),
      9 => array(
        'contestant1' => 12,
        'contestant1_slot' => 1,
        'contestant2' => 11,
        'contestant2_slot' => 1,
      ),
      10 => array(
        'contestant1' => 14,
        'contestant1_slot' => 1,
        'contestant2' => 13,
        'contestant2_slot' => 1,
      ),
      11 => array(
        'contestant1' => 13,
        'contestant1_slot' => 2,
        'contestant2' => 15,
        'contestant2_slot' => 1,
      ),
      12 => array(
        'contestant1' => 14,
        'contestant1_slot' => 2,
        'contestant2' => 15,
        'contestant2_slot' => 2,
      ),
    );

    $this->checkNextMatch($match, $tournament);

    /**
     * 8 man Round
     */
    $tournament = new RoundRobinController(8);

    // Set the paths we are expecting the plugin to return.
    $match = array(
      1 => array(
        'contestant1' => 5,
        'contestant1_slot' => 2,
        'contestant2' => 6,
        'contestant2_slot' => 2,
      ),
      2 => array(
        'contestant1' => 7,
        'contestant1_slot' => 2,
        'contestant2' => 5,
        'contestant2_slot' => 1,
      ),
      3 => array(
        'contestant1' => 8,
        'contestant1_slot' => 2,
        'contestant2' => 6,
        'contestant2_slot' => 1,
      ),
      4 => array(
        'contestant1' => 8,
        'contestant1_slot' => 1,
        'contestant2' => 7,
        'contestant2_slot' => 1,
      ),
      5 => array(
        'contestant1' => 10,
        'contestant1_slot' => 1,
        'contestant2' => 9,
        'contestant2_slot' => 1,
      ),
      6 => array(
        'contestant1' => 9,
        'contestant1_slot' => 2,
        'contestant2' => 11,
        'contestant2_slot' => 1,
      ),
      7 => array(
        'contestant1' => 10,
        'contestant1_slot' => 2,
        'contestant2' => 12,
        'contestant2_slot' => 1,
      ),
      8 => array(
        'contestant1' => 11,
        'contestant1_slot' => 2,
        'contestant2' => 12,
        'contestant2_slot' => 2,
      ),
      9 => array(
        'contestant1' => 13,
        'contestant1_slot' => 2,
        'contestant2' => 14,
        'contestant2_slot' => 2,
      ),
      10 => array(
        'contestant1' => 15,
        'contestant1_slot' => 2,
        'contestant2' => 13,
        'contestant2_slot' => 1,
      ),
      11 => array(
        'contestant1' => 16,
        'contestant1_slot' => 2,
        'contestant2' => 14,
        'contestant2_slot' => 1,
      ),
      12 => array(
        'contestant1' => 16,
        'contestant1_slot' => 1,
        'contestant2' => 15,
        'contestant2_slot' => 1,
      ),
      13 => array(
        'contestant1' => 18,
        'contestant1_slot' => 1,
        'contestant2' => 17,
        'contestant2_slot' => 1,
      ),
      14 => array(
        'contestant1' => 17,
        'contestant1_slot' => 2,
        'contestant2' => 19,
        'contestant2_slot' => 1,
      ),
      15 => array(
        'contestant1' => 18,
        'contestant1_slot' => 2,
        'contestant2' => 20,
        'contestant2_slot' => 1,
      ),
      16 => array(
        'contestant1' => 19,
        'contestant1_slot' => 2,
        'contestant2' => 20,
        'contestant2_slot' => 2,
      ),
      17 => array(
        'contestant1' => 21,
        'contestant1_slot' => 2,
        'contestant2' => 22,
        'contestant2_slot' => 2,
      ),
      18 => array(
        'contestant1' => 23,
        'contestant1_slot' => 2,
        'contestant2' => 21,
        'contestant2_slot' => 1,
      ),
      19 => array(
        'contestant1' => 24,
        'contestant1_slot' => 2,
        'contestant2' => 22,
        'contestant2_slot' => 1,
      ),
      20 => array(
        'contestant1' => 24,
        'contestant1_slot' => 1,
        'contestant2' => 23,
        'contestant2_slot' => 1,
      ),
      21 => array(
        'contestant1' => 26,
        'contestant1_slot' => 1,
        'contestant2' => 25,
        'contestant2_slot' => 1,
      ),
      22 => array(
        'contestant1' => 25,
        'contestant1_slot' => 2,
        'contestant2' => 27,
        'contestant2_slot' => 1,
      ),
      23 => array(
        'contestant1' => 26,
        'contestant1_slot' => 2,
        'contestant2' => 28,
        'contestant2_slot' => 1,
      ),
      24 => array(
        'contestant1' => 27,
        'contestant1_slot' => 2,
        'contestant2' => 28,
        'contestant2_slot' => 2,
      ),
    );

    $this->checkNextMatch($match, $tournament);

    /**
     * 10 man Round
     */
    $tournament = new RoundRobinController(10);

    // Set the paths we are expecting the plugin to return.
    $match = array(
      1 => array(
        'contestant1' => 6,
        'contestant1_slot' => 2,
        'contestant2' => 7,
        'contestant2_slot' => 2,
      ),
      2 => array(
        'contestant1' => 8,
        'contestant1_slot' => 2,
        'contestant2' => 6,
        'contestant2_slot' => 1,
      ),
      3 => array(
        'contestant1' => 9,
        'contestant1_slot' => 2,
        'contestant2' => 7,
        'contestant2_slot' => 1,
      ),
      4 => array(
        'contestant1' => 10,
        'contestant1_slot' => 2,
        'contestant2' => 8,
        'contestant2_slot' => 1,
      ),
      5 => array(
        'contestant1' => 10,
        'contestant1_slot' => 1,
        'contestant2' => 9,
        'contestant2_slot' => 1,
      ),
      6 => array(
        'contestant1' => 12,
        'contestant1_slot' => 1,
        'contestant2' => 11,
        'contestant2_slot' => 1,
      ),
      7 => array(
        'contestant1' => 11,
        'contestant1_slot' => 2,
        'contestant2' => 13,
        'contestant2_slot' => 1,
      ),
      8 => array(
        'contestant1' => 12,
        'contestant1_slot' => 2,
        'contestant2' => 14,
        'contestant2_slot' => 1,
      ),
      9 => array(
        'contestant1' => 13,
        'contestant1_slot' => 2,
        'contestant2' => 15,
        'contestant2_slot' => 1,
      ),
      10 => array(
        'contestant1' => 14,
        'contestant1_slot' => 2,
        'contestant2' => 15,
        'contestant2_slot' => 2,
      ),
      11 => array(
        'contestant1' => 16,
        'contestant1_slot' => 2,
        'contestant2' => 17,
        'contestant2_slot' => 2,
      ),
      12 => array(
        'contestant1' => 18,
        'contestant1_slot' => 2,
        'contestant2' => 16,
        'contestant2_slot' => 1,
      ),
      13 => array(
        'contestant1' => 19,
        'contestant1_slot' => 2,
        'contestant2' => 17,
        'contestant2_slot' => 1,
      ),
      14 => array(
        'contestant1' => 20,
        'contestant1_slot' => 2,
        'contestant2' => 18,
        'contestant2_slot' => 1,
      ),
      15 => array(
        'contestant1' => 20,
        'contestant1_slot' => 1,
        'contestant2' => 19,
        'contestant2_slot' => 1,
      ),
      16 => array(
        'contestant1' => 22,
        'contestant1_slot' => 1,
        'contestant2' => 21,
        'contestant2_slot' => 1,
      ),
      17 => array(
        'contestant1' => 21,
        'contestant1_slot' => 2,
        'contestant2' => 23,
        'contestant2_slot' => 1,
      ),
      18 => array(
        'contestant1' => 22,
        'contestant1_slot' => 2,
        'contestant2' => 24,
        'contestant2_slot' => 1,
      ),
      19 => array(
        'contestant1' => 23,
        'contestant1_slot' => 2,
        'contestant2' => 25,
        'contestant2_slot' => 1,
      ),
      20 => array(
        'contestant1' => 24,
        'contestant1_slot' => 2,
        'contestant2' => 25,
        'contestant2_slot' => 2,
      ),
      21 => array(
        'contestant1' => 26,
        'contestant1_slot' => 2,
        'contestant2' => 27,
        'contestant2_slot' => 2,
      ),
      22 => array(
        'contestant1' => 28,
        'contestant1_slot' => 2,
        'contestant2' => 26,
        'contestant2_slot' => 1,
      ),
      23 => array(
        'contestant1' => 29,
        'contestant1_slot' => 2,
        'contestant2' => 27,
        'contestant2_slot' => 1,
      ),
      24 => array(
        'contestant1' => 30,
        'contestant1_slot' => 2,
        'contestant2' => 28,
        'contestant2_slot' => 1,
      ),
      25 => array(
        'contestant1' => 30,
        'contestant1_slot' => 1,
        'contestant2' => 29,
        'contestant2_slot' => 1,
      ),
      26 => array(
        'contestant1' => 32,
        'contestant1_slot' => 1,
        'contestant2' => 31,
        'contestant2_slot' => 1,
      ),
      27 => array(
        'contestant1' => 31,
        'contestant1_slot' => 2,
        'contestant2' => 33,
        'contestant2_slot' => 1,
      ),
      28 => array(
        'contestant1' => 32,
        'contestant1_slot' => 2,
        'contestant2' => 34,
        'contestant2_slot' => 1,
      ),
      29 => array(
        'contestant1' => 33,
        'contestant1_slot' => 2,
        'contestant2' => 35,
        'contestant2_slot' => 1,
      ),
      30 => array(
        'contestant1' => 34,
        'contestant1_slot' => 2,
        'contestant2' => 35,
        'contestant2_slot' => 2,
      ),
      31 => array(
        'contestant1' => 36,
        'contestant1_slot' => 2,
        'contestant2' => 37,
        'contestant2_slot' => 2,
      ),
      32 => array(
        'contestant1' => 38,
        'contestant1_slot' => 2,
        'contestant2' => 36,
        'contestant2_slot' => 1,
      ),
      33 => array(
        'contestant1' => 39,
        'contestant1_slot' => 2,
        'contestant2' => 37,
        'contestant2_slot' => 1,
      ),
      34 => array(
        'contestant1' => 40,
        'contestant1_slot' => 2,
        'contestant2' => 38,
        'contestant2_slot' => 1,
      ),
      35 => array(
        'contestant1' => 40,
        'contestant1_slot' => 1,
        'contestant2' => 39,
        'contestant2_slot' => 1,
      ),
      36 => array(
        'contestant1' => 42,
        'contestant1_slot' => 1,
        'contestant2' => 41,
        'contestant2_slot' => 1,
      ),
      37 => array(
        'contestant1' => 41,
        'contestant1_slot' => 2,
        'contestant2' => 43,
        'contestant2_slot' => 1,
      ),
      38 => array(
        'contestant1' => 42,
        'contestant1_slot' => 2,
        'contestant2' => 44,
        'contestant2_slot' => 1,
      ),
      39 => array(
        'contestant1' => 43,
        'contestant1_slot' => 2,
        'contestant2' => 45,
        'contestant2_slot' => 1,
      ),
      40 => array(
        'contestant1' => 44,
        'contestant1_slot' => 2,
        'contestant2' => 45,
        'contestant2_slot' => 2,
      ),
    );

    $this->checkNextMatch($match, $tournament);
  }
}