<?php

/**
 * @file
 * Provides entities to create a tournament series.
 */

/**
 * Implements hook_menu().
 */
function tourney_series_menu() {
  $items = array();
  $items['tourney/series/add'] = array(
    'title' => 'Add a new tournament series',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_series', NULL, 'add'),
    'access arguments' => array('create tourney'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney_series.admin.inc',
  );
  $items['tourney/series/%tourney_series'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_series_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'tourney_series', 2),
    'file' => 'includes/tourney_series.admin.inc',
  );
  $items['tourney/series/%tourney_series/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/series/%tourney_series/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_series_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'series'),
    'file' => 'includes/tourney_series.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/series/%tourney_series/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'tourney_series_confirm_delete_page',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('delete', 'series'),
    'file' => 'includes/tourney_series.admin.inc',
    'weight' => 10,
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );  
  return $items;
}

/**
 * Implements hook_permission().
 */
function tourney_series_permission() {
  return array(
    'remove tourney from series' =>  array(
      'title' => t('Remove Tournament from Series'),
      'description' => t('Remove tournaments from a series.'),
    ),
    'add tourney to series' => array(
      'title' => ('Add Tournament to Series'),
      'description' => ('Add tournaments to a series'),
    )
  );
}

/**
 * Implements hook_entity_info().
 */
function tourney_series_entity_info() {
  $return = array();
  $entity_name  = 'tourney_series';
  $entity_short = 'series';
  $entity_class = 'TourneySeriesEntity';

  $return[$entity_name] = array(
    'label' => $entity_name,
    'entity class' => $entity_class,
    'controller class' => 'EntityAPIController',
    'base table' => $entity_name,
    'fieldable' => TRUE,
    'uri callback' => 'tourney_uri',
    'static cache' => TRUE,
    'translation' => array(
      'locale' => TRUE,
    ),
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'label',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'access callback' => 'tourney_access',
    'module' => 'tourney_series',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select($entity_name . '_type', 'ttp')
    ->fields('ttp')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($types as $type => $info) {
    $return[$entity_name]['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/tourney/' . $entity_short . '/manage/%' . $entity_name . '_type',
        'real path' => 'admin/structure/tourney/' . $entity_short . '/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('access content'),
      ),
    );
  }

  $return[$entity_name . '_type'] = array(
    'label' => t('@entity type', array('@entity' => ucfirst($entity_short))),
    'plural label' => t('@entity types', array('@entity' => ucfirst($entity_short))),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => $entity_name . '_type',
    'fieldable' => FALSE,
    'bundle of' => $entity_name,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'access callback' => 'tourney_type_access',
    'module' => 'tourney_series',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/tourney/' . $entity_short,
      'file' => 'includes/tourney_series.admin.inc',
    ),
  );

  return $return;
}

/**
 * Save the tournament series
 *
 * @param TourneySeriesEntity $series
 */
function tourney_series_save($series) {
  entity_save('tourney_series', $series);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function tourney_series_ctools_plugin_type() {
  $plugins['tourney_series'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function tourney_series_ctools_plugin_directory($module, $plugin) {
  if ($module == 'tourney_series' && $plugin == 'tourney_series') {
    return 'plugins/tourney_series';
  }
}

/**
 * Implements hook_views_api().
 */
function tourney_series_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Fetch metadata for all tournament_type plugins.
 *
 * @return
 *   An array of arrays with information about all available tournament types.
 */
function tourney_series_get_types() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('tourney_series', 'tourney_series');
  return $plugins;
}

/**
 * Fetch a tournament series object
 *
 * @param $id
 *   Integer specifying the tournament series id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object of FALSE of it cannot be loaded.
 *
 * @see tourney_series_load_multiple()
 */
function tourney_series_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $series = tourney_series_load_multiple($ids, $conditions, $reset);

  return $series ? reset($series) : FALSE;
}

/**
 * Load multiple tournament series entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of tournament entity objects, indexed by id.
 */
function tourney_series_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_series', $ids, $conditions, $reset);
}

/**
 * Menu auto loaders.
 */
function tourney_series_type_load($type) {
  return tourney_entity_get_types('tourney_series_type', $type);
}