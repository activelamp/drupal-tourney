<?php
/**
 * @file
 * Create tournament, match, and game entities for creating tournaments.
 */

define('TOURNEY_GAMES', 5);
define('TOURNEY_TRUNCATE', 12);
define('TOURNEY_DEBUG_EXTENDS', FALSE);

/**
 * Implements hook_menu().
 */
function tourney_menu() {
  $items = array();
  $items['tourney/add'] = array(
    'title' => 'Add a new tournament',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_tournament', NULL, 'add'),
    'access arguments' => array('create tourney'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/tournament/%tourney_tournament'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_tournament_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'tournament'),
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/tournament/%tourney_tournament/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/tournament/%tourney_tournament/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_tournament_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'tournament'),
    'file' => 'includes/tourney.tournament.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/tournament/%tourney_tournament/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'tourney_confirm_delete_page',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('delete', 'tournament'),
    'file' => 'includes/tourney.admin.inc',
    'weight' => 10,
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/match/%tourney_match'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_match_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'match'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/match/%tourney_match/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/match/%tourney_match/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_match_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'match'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/game/%tourney_game'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_game_page_view',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('view', 'game'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/game/%tourney_game/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/game/%tourney_game/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_game_edit',
    'page arguments' => array(2),
    'access callback' => 'tourney_access',
    'access arguments' => array('edit', 'game'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/tourney'] = array(
    'title' => 'Manage Tourney Entities',
    'page callback' => 'tourney_overview_entities',
    'access arguments' => array('administer tourney'),
    'description' => 'Manage Tournament entities.',
    'file' => 'includes/tourney.tournament.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/tourney'] = array(
    'title' => 'Tournaments',
    'page callback' => 'tourney_admin_content',
    'access arguments' => array('administer tourney'),
    'description' => 'View all the tournaments on your site.',
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // Config
  $items['admin/config/tourney'] = array(
    'title' => 'Tourney',
    'description' => 'Configure Tournament module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tourney_configuration'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tourney/%ctools_js/rounds/configure'] = array(
    'page callback' => 'tourney_configure_rounds',
    'page arguments' => array(1),
    'access arguments' => array('create tourney'),
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/testing'] = array(
    'title' => 'TESTING',
    'page callback' => 'tourney_testing',
    'access arguments' => array('administer tourney'),
  );
  

  return $items;
}

function tourney_testing() {
  $output = '';
  module_load_include('php', 'tourney', 'plugins/tourney_formats/BaseFormatControllers/DoubleElimination');
  
  $test = new DoubleEliminationController(8);
  //$test->setPluginOptions(array('show_byes' => TRUE));
  $output .= $test->render();
  $output .= "<div>testing testing testing</div>";

  return $output;
}

/**
 * Implements hook_menu_alter().
 */
function tourney_menu_alter(&$items) {
  // Only alter when devel is available.
  if (isset($items['node/%node/devel'])) {
    // tourney_tournament entities.
    $items['tourney/tournament/%tourney_tournament/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_tournament', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/tournament/%tourney_tournament/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/tournament/%tourney_tournament/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_tournament', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    // tourney_match entities.
    $items['tourney/match/%tourney_match/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_match', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/match/%tourney_match/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/match/%tourney_match/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_match', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    // tourney_game entities.
    $items['tourney/game/%tourney_match/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_game', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
    $items['tourney/match/%tourney_match/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['tourney/match/%tourney_game/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_load_object',
      'page arguments' => array('tourney_game', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => drupal_get_path('module', 'devel') . '/devel.pages.inc',
      'weight' => 100,
    );
  }
}

/**
 * Implements hook_admin_paths().
 */
function tourney_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'tourney/*/*/*' => TRUE,
      'tourney/add' => TRUE,
    );
  }
}

/**
 * Implements hook_permission().
 */
function tourney_permission() {
  return array(
    'administer tourney' =>  array(
      'title' => t('Administer Tournaments'),
      'description' => t('Create, edit, delete, and perform administration for tournaments.'),
    ),
    'create tourney' =>  array(
      'title' => t('Create Tournaments'),
      'description' => t('Create new tournaments.'),
    ),
    'edit tourney' =>  array(
      'title' => t('Edit Tournaments'),
      'description' => t('Edit any tournaments.'),
    ),
    'delete tourney' =>  array(
      'title' => t('Delete Tournaments'),
      'description' => t('Delete any tournaments.'),
    ),
    'access tourney' =>  array(
      'title' => t('View Tournaments'),
      'description' => t('View any tournament.'),
    ),
    'view unpublished tourney' =>  array(
      'title' => t('View Unpublished Tournaments'),
      'description' => t('View unpublished tournament.'),
    ),
  );
}

/**
 * Menu title callback.
 */
function tourney_page_title($tourney) {
  return ucfirst($tourney->label());
}

function _tourney_machine_name($title) {
  return trim(preg_replace('/[^a-z0-9-]/', '-', strtolower($title)), '-');
}

/**
 * Implements hook_entity_info().
 */
function tourney_entity_info() {
  $return = array();
  $entities = tourney_entities();
  foreach ($entities as $entity_name => $bundle) {
    // Entity name minus the tourney_ prefix
    $entity_short = substr($entity_name, 8);

    $entity_class = 'Entity';
    $entity_class = ($entity_short == 'tournament') ? 'TourneyTournamentEntity' : $entity_class;
    $entity_class = ($entity_short == 'match') ? 'TourneyMatchEntity' : $entity_class;
    $entity_class = ($entity_short == 'game') ? 'TourneyGameEntity' : $entity_class;

    $return[$entity_name] = array(
      'label' => ucfirst($entity_short),
      'entity class' => $entity_class,
      'controller class' => 'EntityAPIController',
      'base table' => $entity_name,
      'fieldable' => TRUE,
      'uri callback' => 'tourney_uri',
      'static cache' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'access callback' => 'tourney_access',
      'module' => 'tourney',
    );

    // Add bundle info but bypass entity_load() as we cannot use it here.
    $types = db_select($entity_name . '_type', 'ttp')
      ->fields('ttp')
      ->execute()
      ->fetchAllAssoc('name');

    foreach ($types as $type => $info) {
      $return[$entity_name]['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/tourney/' . $entity_short . '/manage/%' . $entity_name . '_type',
          'real path' => 'admin/structure/tourney/' . $entity_short . '/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('access content'),
        ),
      );
    }

    $return[$entity_name . '_type'] = array(
      'label' => t('@entity type', array('@entity' => ucfirst($entity_short))),
      'plural label' => t('@entity types', array('@entity' => ucfirst($entity_short))),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => $entity_name . '_type',
      'fieldable' => FALSE,
      'bundle of' => $entity_name,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'tourney_type_access',
      'module' => 'tourney',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/tourney/' . $entity_short,
        'file' => 'includes/tourney.admin.inc',
      ),
    );
  }

  return $return;
}

/**
 * Access callback for the entity API.
 */
function tourney_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer tourney', $account);
}

/**
 * Implements hook_forms().
 */
function tourney_forms($form_id, $args) {
  foreach (tourney_entities() as $entity_name => $bundle) {
    $forms[$entity_name . '_type_form'] = array(
      'callback' => 'tourney_type_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function tourney_field_extra_fields() {
  $extra['tourney_tournament']['tournament'] = array(
    'form' => array(
      'format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
      'matches' => array(
        'label' => t('Tournament Matches'),
        'description' => t('A rendered bracket of matches in tournament'),
        'weight' => 1,
      ),
    ),
    'display' => array(
      'tourney_format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'tourney_winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'tourney_players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
      'matches' => array(
        'label' => t('Tournament Matches'),
        'description' => t('A rendered bracket of matches in tournament'),
        'weight' => 1,
      ),
    ),
  );

  $extra['tourney_match']['match'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
    ),
    'display' => array(
      'tournament' => array(
        'label' => t('Tournament Link'),
        'description' => t('A link to the tournament this match is in'),
        'weight' => -10,
      ),
      'label' => array(
        'label' => t('Title'),
        'description' => t('The title of the match'),
        'weight' => -1,
      ),
      'match_winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'match_contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'match_contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
      'match_table' => array(
        'label' => t('Match Table'),
        'description' => t('Rendered display of games in the match'),
        'weight' => 0,
      ),
    ),
  );

  $extra['tourney_game']['game'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'label' => array(
        'label' => t('Title'),
        'description' => t('The title of the game'),
        'weight' => -1,
      ),
      'game_winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function tourney_theme($existing, $type, $theme, $path) {
  return array(
    'tourney_render_match' => array(
      'variables' => array('match' => NULL),
      'file' => 'match.inc',
      'path' => $path . '/theme',
    ),
    'tourney_admin_content' => array(
      'variables' => array('tournaments' => NULL),
      'file' => 'includes/tourney.admin.inc',
    ),
    'tourney_render_tourney' => array(
      'variables' => array('tournament' => NULL),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_matchblock' => array(
      'variables' => array('match' => NULL, 'flow' => FALSE, 'small' => 0),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_spacer' => array(
      'variables' => array('height' => 1, 'flow' => FALSE, 'small' => TRUE, 'y' => 1),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_flow_control' => array(
      'variables' => array('flows' => ''),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_match_fix' => array(
      'render element' => 'element',
      'file' => 'tourney.match.inc',
      'path' => $path . '/includes',
    ),
  ) + _tourney_theme($existing, $type, $theme, $path);
}

/**
 * Get the theme implementations defined in the plugins.
 */
function _tourney_theme($existing, $type, $theme, $path) {
  $hooks = array();
  $plugins = tourney_get_types();
  foreach ($plugins as $info) {
    $class = ctools_plugin_get_class($info, 'controller');
    if (method_exists($class, 'theme')) {
      $hooks += $class::theme($existing, $type, $theme, $info['path']);
    }
  }
  return $hooks;
}

/**
 * Defines the entities and their default bundles for the entities created by
 * this module.
 */
function tourney_entities() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['tourney_tournament'] = (object) array(
      'type' => 'tournament',
      'name' => t('Tournament'),
      'description' => t('A tournament entity.'),
    );
    $types['tourney_match'] = (object) array(
      'type' => 'match',
      'name' => t('Match'),
      'description' => t('A match entity.'),
    );
    $types['tourney_game'] = (object) array(
      'type' => 'game',
      'name' => t('Game'),
      'description' => t('A game entity.'),
    );
  }
  return $types;
}

/**
 * URI callback defining path for each entity defined in tourney.
 */
function tourney_uri($entity) {
  return array(
    'path' => 'tourney/' . $entity->type . '/' . $entity->id,
  );
}

/**
 * Menu auto loaders.
 */
function tourney_tournament_type_load($type) {
  return tourney_tournament_type_get_types($type);
}
function tourney_match_type_load($type) {
  return tourney_match_type_get_types($type);
}
function tourney_game_type_load($type) {
  return tourney_game_type_get_types($type);
}

/**
 * Wrapper functions for the default entities #machine_name existing callback.
 */
function tourney_tournament_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_tournament_type', $type_name);
}
function tourney_match_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_match_type', $type_name);
}
function tourney_game_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_game_type', $type_name);
}

/**
 * Gets an array of all types, keyed by the type name.
 *
 * @param $entity_name
 *   The name of the entity to look at.
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return
 *   Depending whether $type isset, an array of types or a single one.
 */
function tourney_entity_get_types($entity_name, $type_name = NULL) {
  $types = entity_load_multiple_by_name($entity_name, isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Access callback for tourney module.
 */
function tourney_access($op = 'view', $group = NULL, $account = NULL) {
  if (user_access('administer tourney')) {
    return TRUE;
  }
  // @todo: this is bad should get this from menu item passed.
  $entity_id = arg(2);
  switch ($op) {
    case 'view':
      if (!$group) {
        return FALSE;
      }
      $entity = entity_load_single('tourney_' . $group, $entity_id);
      if (property_exists($entity, 'status') && $entity->status == 0) {
        return user_access('view unpublished tourney');
      }
      else {
        return user_access('access tourney');
      }

    case 'edit':
      return user_access('edit tournament');

    case 'delete':
      return user_access('delete tournament');
  }

  return FALSE;
}

/**
 * Load a tourney entity by entity type and name.
 * 
 * @param $entity_type
 *   The entity type to load from.
 * @param $name
 *   The machine name of the entity you want to load.
 * @return
 *   A loaded entity object.
 */
function tourney_entity_load_by_name($entity_type, $name) {
  $entity_id = db_query("SELECT id FROM {" . $entity_type . "} WHERE name = :name",
    array(':name' => $name))
    ->fetchField();
  
  $function = $entity_type . '_load';
  return $entity_id  > 0 ? $function($entity_id) : NULL;
}

/**
 * Fetch a tournament object
 *
 * @param $id
 *   Integer specifying the tournament id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object of FALSE of it cannot be loaded.
 *
 * @see tourney_tournament_load_multiple()
 */
function tourney_tournament_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $tournament = tourney_tournament_load_multiple($ids, $conditions, $reset);

  return $tournament ? reset($tournament) : FALSE;
}

/**
 * Load multiple tournament entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of tournament entity objects, indexed by id.
 */
function tourney_tournament_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_tournament', $ids, $conditions, $reset);
}

/**
 * Fetch a match object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_match_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_match_load_multiple($ids, $conditions, $reset);
  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple match entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_match_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_match', $ids, $conditions, $reset);
}

/**
 * Fetch a game object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_game_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_game_load_multiple($ids, $conditions, $reset);

  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple game entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_game_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_game', $ids, $conditions, $reset);
}


/**
 * Implements hook_entity_insert().
 */
function tourney_entity_insert($entity, $type) {
  $entity->entity_type = $type;
  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function tourney_entity_update($entity, $type) {
  $info = entity_get_info($type);
  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function tourney_entity_delete($entity, $type) {
  // Remove the pathauto aliases for all our defined entities.
  if (module_exists('pathauto') && is_subclass_of($entity, 'TourneyEntity')) {
    $uri = tourney_uri($entity);
    pathauto_entity_path_delete_all($type, $entity, $uri);
  }
}

/**
 * Save a tournament entity.
 */
function tourney_tournament_save(&$tourney) {
  entity_save('tourney_tournament', $tourney);
}

/**
 * Save a match entity.
 */
function tourney_match_save(&$match) {
  entity_save('tourney_match', $match);
}

/**
 * Save a game entity.
 */
function tourney_game_save(&$game) {
  entity_save('tourney_game', $game);
  if (isset($game->match) && is_object($game->match)) {
    cache_clear_all('tourney_winner_count_' . $game->match->id, 'cache_tourney');
    cache_clear_all('tourney_match_games_' . $game->match->id, 'cache_tourney', TRUE);
    cache_clear_all('tourney_build_matches_' . $game->match->getTournament()->id, 'cache_tourney', TRUE);
  }
}

/**
 * Fetch metadata for all tournament_type plugins.
 *
 * @return
 *   An array of arrays with information about all available tournament types.
 */
function tourney_get_types() {
  ctools_include('plugins');
  return ctools_get_plugins('tourney', 'tourney_formats');
}

/**
 * Create a relation between two entities.
 *
 * @param $predicate
 *   The relation type to save.
 * @param $source_entity
 *   The source entity.
 * @param $source_id
 *   The entity id of the source entity.
 * @param $destination_entity
 *   The destination entity.
 * @param $destination_id
 *   The entity id of the destination entity.
 */
function tourney_create_relation($predicate, $source_entity, $source_id, $destination_entity, $destination_id) {
  $entity_keys = array(
    array('entity_type' => $source_entity, 'entity_id' => $source_id),
    array('entity_type' => $destination_entity, 'entity_id' => $destination_id),
  );
  return relation_insert($predicate, $entity_keys);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function tourney_ctools_plugin_type() {
  $plugins['tourney_formats'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function tourney_ctools_plugin_directory($module, $plugin) {
  if ($module == 'tourney' && $plugin == 'tourney_formats') {
    return 'plugins/tourney_formats';
  }
}

/**
 * Implements hook_views_api().
 */
function tourney_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Update the URL aliases for an individual tourney entity.
 *
 * @param $entity
 *   An entity object.
 * @param $op
 *   Operation being performed ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function tourney_update_alias($entity, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the node.
  if (!module_exists('pathauto')) {
    return;
  }

  if (isset($entity->path['pathauto']) && empty($entity->path['pathauto'])) {
    if (isset($entity->path)) {
      $path = $entity->path;
      $path['alias'] = trim($path['alias']);
      if (!empty($path['pid']) && empty($path['alias'])) {
        path_delete($path['pid']);
      }
      if (!empty($path['alias'])) {
        $path['source'] = 'tourney/' . $entity->type . '/' . $entity->id;
        $path['language'] = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
        path_save($path);
      }
    }
    return;
  }

  /*
  $options += array(
    'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
  );
  */

  // Skip processing if the node has no pattern.
  //if (!pathauto_pattern_load_by_entity($entity->_entity_type, $entity->_entity_type, $options['language'])) {
  if (!pathauto_pattern_load_by_entity($entity->entity_type, $entity->type)) {
    // Remove the alias if a pattern is no longer given.
    $uri = tourney_uri($entity);
    pathauto_entity_path_delete_all($entity->type, $entity, $uri);
    return;
  }

  module_load_include('inc', 'pathauto');
  $uri = entity_uri($entity->entity_type, $entity);
  //pathauto_create_alias($entity_type, $op, $uri['path'], array($entity_type => $entity), $entity_type, $options['language']);
  return pathauto_create_alias($entity->entity_type, $op, $uri['path'], array($entity->entity_type => $entity), $entity->type);
}
/**
 * Implements hook_flush_caches().
 */
function tourney_flush_caches() {
  return array('cache_tourney');
}

/**
 * Returns a single part of a full match name
 *
 * @param $name
 *   Full name of the match in bracket_round_match[_contestant] format
 * @param $part
 *   Which part of the name to return
 * @return $value
 *   Value of the part asked for
 */
function tourney_get_name_part($name, $part) {
  foreach (explode('_', $name) as $sub) {
    $sub = explode('-', $sub);
    if ($sub[0] == $part) return $sub[1];
  }
}

function tourney_initialize_configuration() {
  global $_tourney_config;

  if ($cached = cache_get('configuration', 'cache_tourney')) {
    $config = $cached->data;
  }
  else {
    $name = 'tourney_variable_init';
    if (!lock_acquire($name, 1)) {
      lock_wait($name);
      return tourney_initialize_configuration();
    }
    else {
      $config = array();
      $query = db_query('SELECT id, type, value FROM {tourney}');
      foreach ($query->fetchAll() as $row) {
        $config[$row->id][$row->type] = unserialize($row->value);
      }
      cache_set('configuration', $config, 'cache_tourney');
      lock_release($name);
    }
  }

  $_tourney_config = $config;
  return $config;
}



function tourney_action_info() {
  return array(
    'tourney_unpublish_action' => array(
      'type' => 'tourney_tournament',
      'label' => t('Unpublish selected tournaments'),
      'configurable' => FALSE,
    ),

    'tourney_unpdate_match_action' => array(
      'type' => 'tourney_match',
      'label' => t('Update selected matches'),
      'configurable' => FALSE,
    ),
  );
}

function tourney_unpublish_action(&$entity, $context) {
  dpm($entity);
}

function tourney_unpdate_match_action(&$entity, $context) {
  auto_entitylabel_set_title($entity, $entity->entity_type);
  entity_save($entity->entity_type, $entity);
}


// POSSIBLE ENTITY MODULE PATCHES:

function entity_load_by_eid($eids) {
  $entities = array();
  foreach ($eids as $eid) {
    $entities[$eid] = entity_load_single_by_eid($eid);
  }
  return $entities;
}

function entity_load_single_by_eid($eid) {
  @list($type, $id) = explode('.', $eid);
  return entity_load_single($type, $id);
}

/**
 * Implements hook_entity_load().
 */
function tourney_entity_load($entities, $type) {
  // Need consistent properties about the entity loaded since contestants can
  // be any entity.
  // @todo: limit this logic just to entities that are setup in the contestant
  //   relations.
  foreach ($entities as $id => $entity) {
    $entity->eid         = $type . '.' . $id;
    $entity->entity_type = $type;
    $entity->entity_id   = $id;
    $entity->entity_name =
      property_exists($entity, 'name') ? $entity->name :
        (property_exists($entity, 'title') ? $entity->title :
          (property_exists($entity, 'label') ? $entity->label : NULL));
  }
}