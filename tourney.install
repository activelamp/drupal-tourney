<?php

/**
 * @file
 * Install, update and uninstall functions for tournaments.
 */

/**
 * Implements hook_schema().
 */
function tourney_schema() {
  $schema['tourney_tournament'] = array(
    'description' => 'The base table for tournaments.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a tournament.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'type' => array(
        'description' => 'The bundle.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      'status' => array(
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'name' => array(
        'description' => 'The machine-readable name of this tournament.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'label' => array(
        'description' => 'The title of the tournament, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'format' => array(
        'description' => 'The format of tournament play.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''),
      'players' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => "The number of contestants in tournament."),
      'winner' => array(
        'description' => 'Winner of the tournament.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      'matches_created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => "The number of matches created in this tournament."),
      ),
    'unique keys' => array(
      'id' => array('id'),
      ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['tourney_match'] = array(
    'description' => 'The base table for a match.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a match.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'type' => array(
        'description' => 'The bundle.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      'status' => array(
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'name' => array(
        'description' => 'The machine-readable name of this match.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'label' => array(
        'description' => 'The title of a match, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'games' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => "The number of games in a match."),
      'winner' => array(
        'description' => 'Winner of the match.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''),
      'this_match' => array(
        'description' => 'Name of this match.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''),
      ),
    'unique keys' => array(
      'id' => array('id'),
      ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['tourney_game'] = array(
    'description' => 'The base table for a match.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a game.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'type' => array(
        'description' => 'The bundle.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'status' => array(
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'name' => array(
        'description' => 'The machine-readable name of this game.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'label' => array(
        'description' => 'The title of a game, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'winner' => array(
        'description' => 'Winner of the match.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      ),
    'unique keys' => array(
      'id' => array('id'),
      ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  // Defing the bundle schemas for all three entities
  $schema['tourney_tournament_type'] =
  $schema['tourney_match_type'] =
  $schema['tourney_game_type'] = array(
    'description' => 'Stores information about all defined types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique type ID.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
  $schema['tourney'] = array(
    'description' => 'Stores information about each tournament.',
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => '64',
        'default' => '',
        'not null' => TRUE,
        'description' => 'An machine_name identifier for the tournament object.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '64',
        'default' => '',
        'not null' => TRUE,
        'description' => 'The type of information being stored for the tournament.',
      ),
      'value' => array(
        'type' => 'blob',
        'description' => 'A serialized array of options for this tournament.',
        'serialize' => TRUE,
        'serialized default' => 'a:0:{}',
      ),
    ),
    'indexes' => array('id' => array('id')),
  );
  $schema['tourney_rank'] = array(
    'description' => 'Stores information about each tournament.',
    'fields' => array(
      'tournament' => array(
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'description' => '',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'description' => '',
      ),
      'entity_id' => array(
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'description' => '',
      ),
      'wins' => array(
        'type' => 'float',
        'length' => '11',
        'default' => 0,
        'not null' => TRUE,
        'description' => '',
      ),
      'losses' => array(
        'type' => 'float',
        'length' => '11',
        'default' => 0,
        'not null' => TRUE,
        'description' => '',
      ),
      'rank' => array(
        'type' => 'float',
        'length' => '11',
        'default' => 0,
        'not null' => TRUE,
        'description' => '',
      ),
    ),
  );

  $schema['cache_tourney'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}

/**
 * Implements hook_install().
 */
function tourney_install() {
  /** Creating the tournament <=> match relation. */
  $relation = new stdClass();
  $relation->relation_type = 'has_match';
  $relation->label = 'has match';
  $relation->reverse_label = 'is match of';
  $relation->directional = TRUE;
  $relation->source_bundles['tourney_tournament:*'] = 'tourney_tournament:*';
  $relation->target_bundles['tourney_match:*'] = 'tourney_match:*';
  relation_type_save($relation);

  /** Creating the match <=> game relation. */
  $relation = new stdClass();
  $relation->relation_type = 'has_game';
  $relation->label = 'has game';
  $relation->reverse_label = 'is game of';
  $relation->directional = TRUE;
  $relation->source_bundles['tourney_match:*'] = 'tourney_match:*';
  $relation->target_bundles['tourney_game:*'] = 'tourney_game:*';
  relation_type_save($relation);

  /** Creating the contestant relation. */
  $relation = new stdClass();
  $relation->relation_type = 'contestant';
  $relation->label = 'contestant';
  $relation->directional = TRUE;
  $relation->source_bundles['tourney_match:*'] = 'tourney_match:*';
  $relation->target_bundles['user:*'] = 'user:*';
  $relation->target_bundles['node:*'] = 'node:*';
  relation_type_save($relation);

  // Define fields for the tournament has match relation.
  $field = array(
    'field_name' => 'slot',
    'cardinality' => 1,
    'type' => 'number_integer',
  );
  field_create_field($field);

  $field_instance = array(
    'entity_type' => 'relation',
    'bundle' => 'contestant',
    'field_name' => 'slot',
    'label' => st('Slot'),
  );
  field_create_instance($field_instance);

  // Create the default bundles for the tournaments
  $type = entity_create('tourney_tournament_type', array(
    'name' => 'tournament',
    'label' => st('Tournament'),
    'weight' => 0,
  ));
  $type->save();
  $type = entity_create('tourney_match_type', array(
    'name' => 'match',
    'label' => st('Match'),
    'weight' => 0,
  ));
  $type->save();
  $type = entity_create('tourney_game_type', array(
    'name' => 'game',
    'label' => st('Game'),
    'weight' => 0,
  ));
  $type->save();

  // Set extra field defaults.
  _tourney_set_extra_fields_defaults();
}

/**
 * Implements hook_uninstall().
 */
function tourney_uninstall() {
  $relations = db_select('relation', 'rt')
    ->fields('rt', array('rid'))
    ->condition('relation_type', array('has_match', 'has_game', 'contestant'), 'in')
    ->execute()->fetchCol('rid');
  relation_delete_multiple($relations);

  relation_type_delete('has_match');
  relation_type_delete('has_game');
  relation_type_delete('contestant');
}

/**
 * Add contestant relation.
 */
function tourney_update_7001() {
  $relation = new stdClass();
  $relation->relation_type = 'contestant';
  $relation->label = 'contestant';
  $relation->directional = TRUE;
  $relation->source_bundles['tourney_match:*'] = 'tourney_match:*';
  $relation->target_bundles['user:*'] = 'user:*';
  $relation->target_bundles['node:*'] = 'node:*';
  relation_type_save($relation);

  $field = array(
    'field_name' => 'slot',
    'cardinality' => 1,
    'type' => 'number_integer',
  );
  field_create_field($field);

  $field_instance = array(
    'entity_type' => 'relation',
    'bundle' => 'contestant',
    'field_name' => 'slot',
    'label' => st('Slot'),
  );
  field_create_instance($field_instance);

  return t('Tournament contestant relation added.');
}

/**
 * Update the format column in tourney table with new class name.
 */
function tourney_update_7002() {
  // Append the word controller to any tournament formats that do not already
  // have it.
  $rows = db_query("SELECT id, format FROM {tourney_tournament}
    WHERE format NOT LIKE '%Controller'")->fetchAll();

  // Update each row
  foreach ($rows as $row) {
    $num_updated = db_update('tourney_tournament') // Table name no longer needs {}
      ->fields(array(
        'format' => $row->format . 'Controller',
      ))
      ->condition('id', $row->id)
      ->execute();
  }

  return t('Tournament formats updated successfully.');
}

/**
 * Add a settings table for tourney. Removes un-needed fields in the
 * tourney_match table.
 */
function tourney_update_7003() {
  $schema = tourney_schema();

  db_create_table('tourney', $schema['tourney']);
  db_drop_field('tourney_match', 'next_match_winner');
  db_drop_field('tourney_match', 'next_match_loser');
  db_drop_field('tourney_match', 'previous_match1');
  db_drop_field('tourney_match', 'previous_match2');
}

/**
 * Adding a machine name field to entities
 */
function tourney_update_7004() {
  $field = array(
    'description' => 'The machine-readable name of this entity.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'initial' => '',
  );
  foreach (array('tourney_tournament', 'tourney_match', 'tourney_game') as $table) {
    if (!db_field_exists($table, 'name')) {
      db_add_field($table, 'name', $field);
    }
  }

  return t('Tournament content updated successfully.');
}

/**
 * Increase machine name field size.
 */
function tourney_update_7005() {
  db_change_field('tourney_tournament', 'name', 'name',
    array(
      'description' => 'The machine-readable name of this entity.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'initial' => '',
    ));
  db_change_field('tourney_match', 'name', 'name',
    array(
      'description' => 'The machine-readable name of this entity.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'initial' => '',
    ));
  db_change_field('tourney_game', 'name', 'name',
    array(
      'description' => 'The machine-readable name of this entity.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'initial' => '',
    ));

  foreach (array('tourney_tournament', 'tourney_match', 'tourney_game') as $table) {
    if (db_field_exists($table, 'name')) {
      _tourney_update_name_field($table);
    }
  }

  // Remove previous index to prevent conflicts.
  db_drop_unique_key('tourney_tournament', 'name');
  db_drop_unique_key('tourney_match', 'name');
  db_drop_unique_key('tourney_game', 'name');

  db_add_unique_key('tourney_tournament', 'name', array('name'));
  db_add_unique_key('tourney_match', 'name', array('name'));
  db_add_unique_key('tourney_game', 'name', array('name'));
  return t('Updated field length for name successfully.');
}

function tourney_update_7006() {
  db_add_field('tourney_tournament', 'status',
    array(
    'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  ));
  return t('Tournament content updated successfully.');
}

function tourney_update_7007() {
  db_change_field('tourney', 'tourney_options', 'value',
    array(
      'type' => 'blob',
      'description' => 'A serialized array of options for this tournament.',
      'serialize' => TRUE,
      'serialized default' => 'a:0:{}',
    ));
  return t('Tournament table updated successfully.');
}


function tourney_update_7008() {
  db_change_field('tourney_tournament', 'title', 'label',
    array(
      'description' => 'The title of a tournament, always treated as non-markup plain text.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  db_change_field('tourney_match', 'title', 'label',
    array(
      'description' => 'The title of a match, always treated as non-markup plain text.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  db_change_field('tourney_game', 'title', 'label',
    array(
      'description' => 'The title of a game, always treated as non-markup plain text.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  return t('Tournament table updated successfully.');
}

/**
 * Delete fields on relation entity that are no longer in use.
 */
function tourney_update_7009() {
  field_delete_field('bracket');
  field_delete_field('round');
  return t('Fields deleted sucessfully.');
}

/**
 * Changes the max-length of machine name fields to be much larger.
 */
function tourney_update_7010() {
  db_change_field('tourney_tournament', 'name', 'name', array(
    'description' => 'The machine-readable name of this tournament.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE));
  db_change_field('tourney_match', 'name', 'name', array(
    'description' => 'The machine-readable name of this match.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE));
  db_change_field('tourney_game', 'name', 'name', array(
    'description' => 'The machine-readable name of this game.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE));
  return t('Machine name fields updated successfully.');
}

/**
 * Adding status field for match and game entities.
 */
function tourney_update_7011() {
  db_add_field('tourney_match', 'status',
    array(
    'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  ));
  db_add_field('tourney_game', 'status',
    array(
    'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  ));
  return t('Tournament content updated successfully.');
}

/**
 * Setting default settings for new view modes added.
 */
function tourney_update_7012() {
  _tourney_set_extra_fields_defaults();
}

/**
 * Add the tourney_rank table
 */
function tourney_update_7013() {
  $schema = tourney_schema();
  db_create_table('tourney_rank', $schema['tourney_rank']);
}

/**
 * Changes the win loss fields to float fields.
 */
function tourney_update_7014() {
  db_change_field('tourney_rank', 'wins', 'wins', array(
    'type' => 'float',
    'length' => '11',
    'default' => 0,
    'not null' => TRUE,
    'description' => '',
  ));
  db_change_field('tourney_rank', 'losses', 'losses', array(
    'type' => 'float',
    'length' => '11',
    'default' => 0,
    'not null' => TRUE,
    'description' => '',
  ));
  db_change_field('tourney_rank', 'rank', 'rank', array(
    'type' => 'float',
    'length' => '11',
    'default' => 0,
    'not null' => TRUE,
    'description' => '',
  ));
  return t('Machine name fields updated successfully.');
}



/**
 * Helper functions
 */

/**
 * Set the defaults for the extra_fields().
 */
function _tourney_set_extra_fields_defaults() {
  $settings = array(
    'extra_fields' => array(
      'display' => array(
        // Each extra field
        'bracket' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'bracket' => array('visible' => TRUE, 'weight' => 10),
          'match_list' => array('visible' => FALSE, 'weight' => 10),
          'teaser' => array('visible' => FALSE, 'weight' => 10),
        ),
        'match_list' => array(
          // View modes
          'match_list' => array('visible' => TRUE, 'weight' => 10),
          'default' => array('visible' => FALSE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 11),
          'bracket' => array('visible' => FALSE, 'weight' => 10),
          'teaser' => array('visible' => FALSE, 'weight' => 10),
        ),
      ),
    ),
  );

  field_bundle_settings('tourney_tournament', 'tournament', $settings);

  $settings = array(
    'extra_fields' => array(
      'display' => array(
        // Each extra field
        'tournament' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => FALSE, 'weight' => 10),
          'game_list' => array('visible' => TRUE, 'weight' => 10),
        ),
        'match_winner' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => FALSE, 'weight' => 10),
          'game_list' => array('visible' => TRUE, 'weight' => 10),
        ),
        'match_table' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => FALSE, 'weight' => 10),
          'game_list' => array('visible' => TRUE, 'weight' => 10),
        ),
        'match_block' => array(
          // View modes
          'default' => array('visible' => FALSE, 'weight' => 10),
          'full' => array('visible' => FALSE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => TRUE, 'weight' => 10),
          'game_list' => array('visible' => FALSE, 'weight' => 10),
        ),
        'match_contestant1' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => FALSE, 'weight' => 10),
          'game_list' => array('visible' => FALSE, 'weight' => 10),
        ),
        'match_contestant2' => array(
          // View modes
          'default' => array('visible' => TRUE, 'weight' => 10),
          'full' => array('visible' => TRUE, 'weight' => 10),
          'teaser' => array('visible' => TRUE, 'weight' => 10),
          'match_block' => array('visible' => FALSE, 'weight' => 10),
          'game_list' => array('visible' => FALSE, 'weight' => 10),
        ),
        
      ),
    ),
  );

  field_bundle_settings('tourney_match', 'match', $settings);
}

/**
 * Update machine name field
 */
function _tourney_update_name_field($table) {
  drupal_load('module', 'tourney');
  // Append the word controller to any tournament formats that do not already
  // have it.
  $rows = db_query("SELECT id, title FROM {$table}");

  // Update each row
  foreach ($rows as $row) {
    $machine_name = _tourney_machine_name($row->title);

    // Fix machine name for matches
    if ($table == 'tourney_match') {
      $match = tourney_match_load($row->id);
      $machine_name = $match->getTournament()->name . '_' . $machine_name;
    }
    // Fix machine name for games
    if ($table == 'tourney_game') {
      $game = tourney_game_load($row->id);
      $match = tourney_match_load($game->getMatchId());
      $machine_name = $match->getTournament()->name . '_' . _tourney_machine_name($match->label) . '_' . $machine_name;
    }

    $num_updated = db_update($table) // Table name no longer needs {}
      ->fields(array(
        'name' => $machine_name,
      ))
      ->condition('id', $row->id)
      ->execute();
  }
}
